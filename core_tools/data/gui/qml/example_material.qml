import QtQuick 2.4
import QtQuick.Controls 2.3
import QtQuick.Controls.Material 2.12
import QtQuick.Window 2.2
import QtQuick.Layouts 1.3


Window  {
	width: 1200
    height: 800
    visible: true
    Material.theme: Material.Light
    // Material.accent: Material.Indigo	

    TabBar {
        id: tabBar
        x: 0
        y: 0
        z: 1
        width: parent.width
        TabButton {
            text: qsTr("User variables")
        }
        TabButton {
            text: qsTr("Autogenerated variables")
        }
    }

    StackLayout {
        width: parent.width
        height : 800
        anchors.top: tabBar.bottom
        anchors.bottom: parent.bottom
        currentIndex: tabBar.currentIndex
        Item {
            id: homeTab
            ListModel {
				id : cat_model
			    ListElement {
			        category: "SD voltages"
			    }
			    ListElement {
			        category: "charging energies"
			    }
			    ListElement {
			        category: "tc on/off"
			    }
			    ListElement {
			        category: "Qubit MW properties"
			    }
			}

			Component {
				id : cal_delegate
			    Item {
			        width: parent.width
			        height: 40
			        Rectangle {
		                id: r
		                width: parent.width
			            height: parent.height
		                color: 'transparent'

		                RowLayout {
		                    id: rowLayout
		                    width: 100
		                    height: 40

		                    Rectangle {
		                    	id : rec_ind
		                        width: 20
		                        height : parent.height
		                        color: "transparent"
		                        Layout.fillHeight: true
		                    }

		                    Text {
		                        text: category
		                        Layout.alignment: Qt.AlignHLeft | Qt.AlignVCenter
		                        Layout.fillHeight: false
		                        font.pixelSize: 18
		                    }

		                }
		            }

			        function hover_in(){
			        	if (list.currentIndex != index){
				        	r.color = "#FAFAFA"
				        	rec_ind.color = "#F8BBD0"
				        	console.log('moved in')
				        }
				    }
			        function hover_out(){
			        	if (list.currentIndex != index){
				        	r.color = "transparent"
				        	rec_ind.color = "transparent"
				        	console.log('moved out')
				        }
			        }
			        states: State {
			            name: "Current"
			            when: wrapper.ListView.isCurrentItem
			            PropertyChanges { target: wrapper; x: 20 }
			        }

			        function my_click(){
			        	r.color = "transparent"
			        	rec_ind.color = "transparent"
			        	list.currentIndex = index;
			        }
			        MouseArea {
			            anchors.fill: parent
			            hoverEnabled: true
			            onClicked: my_click()
			            onEntered: hover_in()
			            onExited: hover_out()
			        }
			    }
			}

			Component {
			    id: highlightBar

		        Rectangle {
				    width: parent.width
	                height: 40
	                color: "#F5F5F5"

	                RowLayout {
	                    height: 40
	                    Rectangle {
	                        width: 20
	                        color: Material.color(Material.Pink)
	                        Layout.fillHeight: true
	                    }
	                }
	            }
			}

            ListView {
				id:list
			    anchors.fill: parent

			    model: cat_model
			    delegate: cal_delegate

			    highlight: highlightBar
		        focus: true
		        onCurrentItemChanged: console.log(model.get(list.currentIndex).category + ' selected')
			}
        }
        Item {
            id: discoverTab
        }
    }



	

	


}